#!/usr/bin/python
#
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | check_mk plugin < cisco security hardening check > for comdirect |
# +------------------------------------------------------------------+
#
# Rene Caspari, Jul 18/2016, initial version
# Rene Caspari, Jul 19/2016, changed message queue reporting
#                            added local username check
# Rene Caspari, Jul 22/2016, added vlan 1 usage check
import os
import sys
import re

CONFIGROOT = "/var/rancid/"
GROUPS = ['GROUP1', 'GROUP2']
CONFIGSUB = "/configs/"
MSGQUEUE = {}
STATUS = 0

def config_read(svnfile):
    config = []
    fh = open (svnfile,'r')
    for line in fh:
        config.append(line)
    fh.close()

    return config

# CHECK 1: IDLE TIMEOUT
# idle timeout for SSH and console connections must be 10 minutes
MSGQUEUE['exec-timeout incorrect'] = []
def check_exectimeout(config):
    for line in config:
        if "exec-timeout" in line:
            if "exec-timeout 10" not in line:
                return 1
    return

# CHECK 2: local useraccounts
# there must not be local useraccounts configured beside admin
MSGQUEUE['local usernames configured'] = []
def check_username(config):

    for line in config:
        if line.startswith("username") == 1:
            if not line.startswith("username local_fallback_user"):
                return 1
    return

# CHECK 3: vlan1_usage
# vlan 1 must not be used
MSGQUEUE['vlan1_used'] = []
def check_vlan1_used(config):
    flag = 0
    interface = ""
    interface_config = {}
    interface_line = []
    description = ""
    shutdown = 0
    switchport_mode = ""
    switchport_access_vlan = ""

    for line in config:

        if line.startswith("interface") == 1:
            parse = line.split (" ")
            interface = parse[1]
            interface = interface[:-1]
            interface_config[interface] = []
            flag = 1

        if flag == 1 and line.startswith("!") == 0 and line.startswith("interface") == 0:
            interface_line.append(line[1:])

        elif flag == 1 and line.startswith("!") == 1:

            for line in interface_line:

                if line.startswith("description"):
                    description = line[12:-1]

                elif line.startswith("shutdown"):
                    shutdown = 1

                elif line.startswith("switchport mode"):
                    switchport_mode = line[16:-1]

                elif line.startswith("switchport access vlan"):
                    switchport_access_vlan = line[23:-1]

            if not shutdown and switchport_mode == "access" and (switchport_access_vlan == "" or
                switchport_access_vlan == "1"):
                interface = ""
                interface_line = []
                description = ""
                shutdown = 0
                switchport_mode = ""
                switchport_access_vlan = ""
                flag = 0
                return 1
            else:
                interface = ""
                interface_line = []
                description = ""
                shutdown = 0
                switchport_mode = ""
                switchport_access_vlan = ""
                flag = 0

    return

# CHECK 4: remote logging configured
# configure IP_A, IP_B and IP_C to your needs and beware of escaping dots or
# colons!
# return if config does not contain "^logging.*___IP_A___.*$"
#   or not "^logging.*___IP_B___.*$"
#   or not "^logging.*___IP_C___.*$"
MSGQUEUE['remote logging not correct'] = []
def check_remote_logging(config):
    remote_host_A = 0
    remote_host_B = 0
    remote_host_C = 0

    for line in config:
        if line.startswith(" #RANCID-CONTENT-TYPE: opengear"):
            return
        if re.match("^logging.*___IP_A___.*$", line):
            remote_host_A = 1
        if re.match("^logging.*___IP_B___.*$", line):
            remote_host_B = 1
        if re.match("^logging.*___IP_C___.*$", line):
            remote_host_C = 1

    if not remote_host_A or not remote_host_B or not remote_host_C:
        return 1

    return

# main routine
for GROUP in GROUPS:
    PATH = "%s%s%s" % (CONFIGROOT, GROUP, CONFIGSUB)
    os.chdir( PATH )
    DIRS = os.listdir( PATH )

    for FILE in DIRS:
        if ".svn" not in FILE:
            config = config_read(FILE)

            if check_exectimeout(config):
                STATUS = 1
                MSGQUEUE['exec-timeout incorrect'].append(FILE)
            if check_username(config):
                STATUS = 1
                MSGQUEUE['local usernames configured'].append(FILE)
            if check_vlan1_used(config):
                STATUS = 1
                MSGQUEUE['vlan1_used'].append(FILE)
            if check_remote_logging(config):
                STATUS = 1
                MSGQUEUE['remote logging not correct'].append(FILE)

print "<<<local>>>"
print str(STATUS) + " Cisco - Cisco CheckSecureConfig:",
if STATUS == 0:
    print "everything looks fine."
else:
    keys = MSGQUEUE.keys()
    for key in keys:
        if MSGQUEUE[key]:
            print "\"%s\":" % key,
            for values in MSGQUEUE[key]:
                print "%s" % values,
